{"version":3,"sources":["logo-redux.svg","../../../packages/components/atoms/Button/index.js","components/counter/index.js","containers/counter/index.js","containers/counter/constants.js","../../../packages/containers/counter2/reducer.js","../../../packages/containers/counter2/constants.js","../../../packages/containers/counter2/index.js","containers/counter/reducer.js","reducers.js","store.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["module","exports","Button","props","react_default","a","createElement","type","onClick","children","Component","_ref","data","handleIncrementClick","handleDecrementClick","count","atoms_Button","Container","connect","state","dispatch","initialState","count2","countReducer","arguments","length","undefined","Object","objectSpread","Page","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","store","createStore","reducer","_this$props","value","decrement","increment","es","React","PureComponent","count3","reducers","combineReducers","counter2","counter2Reducer","counter3","counter3Reducer","rootReducer","composeWithDevTools","App","className","src","logo","alt","logoRedux","containers_counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95e6e917.chunk.js","sourcesContent":["module.exports = \"/static/media/logo-redux.5c7392a9.svg\";","import React from 'react';\n\nconst Button = (props) => (<button type={props.type} onClick={props.onClick}>{props.children}</button>);\n\nexport default Button;","import React from 'react';\nimport Button from 'atoms/Button';\n\nconst Component = ({ data, handleIncrementClick, handleDecrementClick }) => {\n  return (\n    <div>\n      <h1>Count: {data.count}</h1>\n      <Button onClick={handleDecrementClick} type=\"button\">Decrement</Button>\n      <Button onClick={handleIncrementClick} type=\"button\">Increment</Button>\n    </div>\n  );\n};\n\nexport default Component;","import { connect } from 'react-redux';\nimport Component from '../../components/counter';\nimport { COUNTER_DECREMENT, COUNTER_INCREMENT } from './constants';\n\nconst mapStateToProps = state => {\n  return {\n    data: state\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleIncrementClick: () => dispatch({ type: COUNTER_INCREMENT }),\n    handleDecrementClick: () => dispatch({ type: COUNTER_DECREMENT })\n  }\n};\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport default Container;","export const COUNTER_INCREMENT = 'APP/COUNTER/INCREMENT';\nexport const COUNTER_DECREMENT = 'APP/COUNTER/DECREMENT';","import { COUNTER_DECREMENT, COUNTER_INCREMENT } from './constants';\n\nlet initialState = {\n  count2: 0,\n}\n\nconst countReducer = function (state = initialState, action) {\n  switch (action.type) {\n    case COUNTER_INCREMENT:\n      return {\n        ...state,\n        count2: state.count2 + 1,\n      };\n    case COUNTER_DECREMENT:\n      return {\n        ...state,\n        count2: state.count2 - 1,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default countReducer;","export const COUNTER_INCREMENT = 'PACKAGES/COUNTER2/INCREMENT';\nexport const COUNTER_DECREMENT = 'PACKAGES/COUNTER2/DECREMENT';","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport { createStore } from 'redux'\nimport reducer from './reducer'\nimport { COUNTER_DECREMENT, COUNTER_INCREMENT } from './constants';\n\nclass Page extends React.PureComponent {\n  constructor(props) {\n    super(props)\n    this.store = createStore(reducer)\n  }\n\n  render() {\n    const { value, decrement, increment } = this.props;\n    return (\n      <Provider store={this.store}>\n        <div>\n          <h1>{value}</h1>\n          <button onClick={increment}>increment</button>\n          <button onClick={decrement}>decrease</button>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    value: state.count2\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    increment: () => dispatch({ type: COUNTER_INCREMENT }),\n    decrement: () => dispatch({ type: COUNTER_DECREMENT })\n  }\n};\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Page);\n\nexport default Container;","import { COUNTER_DECREMENT, COUNTER_INCREMENT } from './constants';\n\nlet initialState = {\n  count3: 0,\n}\n\nconst countReducer = function (state = initialState, action) {\n  switch (action.type) {\n    case COUNTER_INCREMENT:\n      return {\n        ...state,\n        count3: state.count3 + 1,\n      };\n    case COUNTER_DECREMENT:\n      return {\n        ...state,\n        count3: state.count3 - 1,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default countReducer;","import { combineReducers } from 'redux';\nimport counter3Reducer from './containers/counter/reducer';\nimport counter2Reducer from 'containers/counter2/reducer';\n\nconst reducers = combineReducers({\n  counter2: counter2Reducer,\n  counter3: counter3Reducer,\n});\n\nexport default reducers;","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;","import React from 'react';\nimport logo from './logo.svg';\nimport logoRedux from './logo-redux.svg';\nimport './App.css';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport CounterContainer from './containers/counter';\nimport Counter2 from 'containers/counter2';\nimport store from './store';\n\nfunction App() {\n  return (\n    <ReduxProvider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"react logo\" />\n          <img src={logoRedux} className=\"App-logo\" alt=\"redux logo\" />\n        </header>\n        <main>\n          <CounterContainer />\n          <Counter2/>\n        </main>\n      </div>\n    </ReduxProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = \"/static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}